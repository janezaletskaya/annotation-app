import streamlit as st
import os
from PIL import Image
import pandas as pd
from datetime import datetime
import gdown
import zipfile
import tempfile
import shutil


top_options = [
   '–∫—É—Ä—Ç–∫–∞', '–ø–ª–∞—â', '–∂–∏–ª–µ—Ç', '–ø–∏–¥–∂–∞–∫', '–∫–∞—Ä–¥–∏–≥–∞–Ω', '–∫–æ—Å—É—Ö–∞', '—Ö—É–¥–∏', '—Ä—É–±–∞—à–∫–∞ –î–†', '—Ä—É–±–∞—à–∫–∞ –ö–†', '—Ñ—É—Ç–±–æ–ª–∫–∞',
    '–º–∞–π–∫–∞', '—Å–≤–∏—Ç–µ—Ä', '–±–ª—É–∑–∫–∞', '–∫–æ—Ñ—Ç–∞', '–ø–ª–∞—Ç—å–µ –î–†', '–ø–ª–∞—Ç—å–µ –ö–†', '–∫–æ–º–±–∏–Ω–µ–∑–æ–Ω'
]

bottom_options = [
    "–ø–ª–∞—Ç—å–µ –î–†", "–ø–ª–∞—Ç—å–µ –ö–†", "—à–æ—Ä—Ç—ã", "–±—Ä—é–∫–∏", "–¥–∂–∏–Ω—Å—ã", "—é–±–∫–∞ –î", "—é–±–∫–∞ –ö", "—à—Ç–∞–Ω—ã",
]

head_options = [
    "—à–ª—è–ø–∞", "–∫–µ–ø–∫–∞", "–ø–∞–Ω–∞–º–∞", "–ø–ª–∞—Ç–æ–∫", "—à–∞–ø–∫–∞"
]

shoes_options = [
    "—Ç—É—Ñ–ª–∏", "–∫—Ä–æ—Å—Å–æ–≤–∫–∏", "–∫–µ–¥—ã", "c–∞–Ω–¥–∞–ª–∏–∏", "—à–ª–µ–ø–∞–Ω—Ü—ã", '–±–æ—Ç–∏–Ω–∫–∏'
]

accessoires_options = [
    "–∑–æ–Ω—Ç", "—Å–æ–ª–Ω–µ—á–Ω—ã–µ –æ—á–∫–∏", "—à–∞—Ä—Ñ", "–ø–µ—Ä—á–∞—Ç–∫–∏", '–¥–æ–∂–¥–µ–≤–∏–∫'
]

st.set_page_config(page_title="–†–∞–∑–º–µ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", layout="wide")

# –ö–æ–º–ø–∞–∫—Ç–Ω—ã–µ —Å—Ç–∏–ª–∏ CSS —Å —Ü–≤–µ—Ç–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
st.markdown("""
<style>
    /* –£–±–∏—Ä–∞–µ–º –±–æ–ª—å—à–æ–π –æ—Ç—Å—Ç—É–ø —Å–≤–µ—Ä—Ö—É */
    .main .block-container {
        padding-top: 1rem !important;
        padding-bottom: 1rem !important;
    }

    /* –£–º–µ–Ω—å—à–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã —É —á–µ–∫–±–æ–∫—Å–æ–≤ */
    .stCheckbox {
        margin-bottom: -10px !important;
    }

    /* –ö–æ–º–ø–∞–∫—Ç–Ω—ã–µ —Ä–∞–¥–∏–æ–∫–Ω–æ–ø–∫–∏ */
    .stRadio > div {
        gap: 0.5rem !important;
    }

    /* –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –æ—Ç—Å—Ç—É–ø—ã */
    .element-container {
        margin-bottom: 0.5rem !important;
    }

    /* –ö–æ–º–ø–∞–∫—Ç–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ */
    .stMarkdown h3 {
        margin-top: 0.5rem !important;
        margin-bottom: 0.2rem !important;
    }

    /* –¶–≤–µ—Ç–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π */
    .category-title-person { color: #1976D2; font-weight: bold; }
    .category-title-clothing { color: #7B1FA2; font-weight: bold; }
    .category-title-accessories { color: #388E3C; font-weight: bold; }
</style>
""", unsafe_allow_html=True)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ Google Drive
@st.cache_data
def load_images_from_gdrive(gdrive_url, folder_name):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ Google Drive –ø–æ —Å—Å—ã–ª–∫–µ"""
    try:
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        temp_dir = tempfile.mkdtemp()

        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–∑ —Å—Å—ã–ª–∫–∏ Google Drive
        if 'drive.google.com' in gdrive_url:
            if '/folders/' in gdrive_url:
                folder_id = gdrive_url.split('/folders/')[1].split('?')[0]
                # –î–ª—è –ø–∞–ø–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥—Ä—É–≥–æ–π –ø–æ–¥—Ö–æ–¥
                st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ ZIP –∞—Ä—Ö–∏–≤, –∞ –Ω–µ –Ω–∞ –ø–∞–ø–∫—É")
                return None, None
            elif '/file/d/' in gdrive_url:
                file_id = gdrive_url.split('/file/d/')[1].split('/')[0]
            else:
                st.error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏ Google Drive")
                return None, None
        else:
            st.error("–°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–∑ Google Drive")
            return None, None

        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        zip_path = os.path.join(temp_dir, "images.zip")
        download_url = f"https://drive.google.com/uc?id={file_id}"

        with st.spinner("–ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è..."):
            gdown.download(download_url, zip_path, quiet=False)

        # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º
        extract_dir = os.path.join(temp_dir, "extracted")
        with zipfile.ZipFile(zip_path, 'r') as zip_ref:
            zip_ref.extractall(extract_dir)

        # –ù–∞—Ö–æ–¥–∏–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Ñ–∞–π–ª—ã macOS)
        images = []
        image_paths = {}

        for root, dirs, files in os.walk(extract_dir):
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–∞–ø–∫–∏ __MACOSX
            if '__MACOSX' in root:
                continue

            for file in files:
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Ñ–∞–π–ª—ã macOS
                if file.startswith('._') or file.startswith('.DS_Store'):
                    continue

                if file.lower().endswith(('.jpg', '.jpeg', '.png', '.gif', '.bmp')):
                    full_path = os.path.join(root, file)
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    try:
                        with Image.open(full_path) as test_img:
                            test_img.verify()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å
                        images.append(file)
                        image_paths[file] = full_path
                    except Exception as e:
                        print(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {file}: {e}")

        return images, image_paths

    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        return None, None


# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
st.sidebar.header("üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")

# –°–ø–æ—Å–æ–± 1: Google Drive —Å—Å—ã–ª–∫–∞
gdrive_url = st.sidebar.text_input(
    "üîó –°—Å—ã–ª–∫–∞ –Ω–∞ ZIP –∞—Ä—Ö–∏–≤ –≤ Google Drive:",
    placeholder="https://drive.google.com/file/d/...",
    help="–°–æ–∑–¥–∞–π—Ç–µ ZIP –∞—Ä—Ö–∏–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –Ω–∞ Google Drive –∏ –≤—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É"
)

dataset_name = st.sidebar.text_input(
    "üìÅ –ù–∞–∑–≤–∞–Ω–∏–µ –¥–∞—Ç–∞—Å–µ—Ç–∞:",
    placeholder="dataset1",
    help="–ö–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Ñ–∞–π–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
)

# –°–ø–æ—Å–æ–± 2: –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –Ω–∞–ø—Ä—è–º—É—é
st.sidebar.markdown("**–ò–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ ZIP —Ñ–∞–π–ª:**")
uploaded_zip = st.sidebar.file_uploader(
    "–í—ã–±–µ—Ä–∏—Ç–µ ZIP –∞—Ä—Ö–∏–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏",
    type=['zip']
)

# –ò–º—è —Ä–∞–∑–º–µ—Ç—á–∏–∫–∞
st.sidebar.markdown("---")
st.sidebar.header("üë§ –†–∞–∑–º–µ—Ç—á–∏–∫")
annotator_name = st.sidebar.text_input("–í–∞—à–µ –∏–º—è:", placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ñ–µ–Ω—è",
                                       help="–ò–º—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞")

# –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
st.sidebar.markdown("---")
st.sidebar.header("üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
st.sidebar.markdown("""
**–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞:**
1. –°–æ–∑–¥–∞–π—Ç–µ ZIP –∞—Ä—Ö–∏–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
2. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –Ω–∞ Google Drive –∏ –ø–æ–ª—É—á–∏—Ç–µ —Å—Å—ã–ª–∫—É
3. –í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –≤—ã—à–µ –∏ —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ

**–†–∞–∑–º–µ—Ç–∫–∞:**
- –î–ª—è –∫–∞–∂–¥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª, –≤–æ–∑—Ä–∞—Å—Ç, –æ–¥–µ–∂–¥—É
- –ù–∞–∂–∏–º–∞–π—Ç–µ "‚ûï –î–æ–±–∞–≤–∏—Ç—å —á–µ–ª–æ–≤–µ–∫–∞"
- –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –º–µ–∂–¥—É —Ñ–æ—Ç–æ –∫–Ω–æ–ø–∫–∞–º–∏ ‚¨ÖÔ∏è ‚û°Ô∏è

**–≠–∫—Å–ø–æ—Ä—Ç:**
- –°–∫–∞—á–∞–π—Ç–µ CSV —Ñ–∞–π–ª –≤ –∫–æ–Ω—Ü–µ —Ä–∞–±–æ—Ç—ã
""")

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
images = None
image_paths = None

if gdrive_url and dataset_name:
    images, image_paths = load_images_from_gdrive(gdrive_url, dataset_name)
elif uploaded_zip:
    try:
        temp_dir = tempfile.mkdtemp()
        zip_path = os.path.join(temp_dir, "uploaded.zip")

        with open(zip_path, "wb") as f:
            f.write(uploaded_zip.getvalue())

        extract_dir = os.path.join(temp_dir, "extracted")
        with zipfile.ZipFile(zip_path, 'r') as zip_ref:
            zip_ref.extractall(extract_dir)

        images = []
        image_paths = {}

        for root, dirs, files in os.walk(extract_dir):
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–∞–ø–∫–∏ __MACOSX
            if '__MACOSX' in root:
                continue

            for file in files:
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Ñ–∞–π–ª—ã macOS
                if file.startswith('._') or file.startswith('.DS_Store'):
                    continue

                if file.lower().endswith(('.jpg', '.jpeg', '.png', '.gif', '.bmp')):
                    full_path = os.path.join(root, file)
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    try:
                        with Image.open(full_path) as test_img:
                            test_img.verify()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å
                        images.append(file)
                        image_paths[file] = full_path
                    except Exception as e:
                        print(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {file}: {e}")

        if not dataset_name:
            dataset_name = "uploaded_images"

    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {e}")

if not images:
    st.info("üëÜ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å")
    st.markdown("""
    ### üìù –ö–∞–∫ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ:

    **–°–ø–æ—Å–æ–± 1: Google Drive (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)**
    1. –°–æ–∑–¥–∞–π—Ç–µ ZIP –∞—Ä—Ö–∏–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
    2. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –Ω–∞ Google Drive  
    3. –û—Ç–∫—Ä–æ–π—Ç–µ –¥–æ—Å—Ç—É–ø "–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–ª—è –≤—Å–µ—Ö, —É –∫–æ–≥–æ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞"
    4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –≤—ã—à–µ

    **–°–ø–æ—Å–æ–± 2: –ü—Ä—è–º–∞—è –∑–∞–≥—Ä—É–∑–∫–∞**
    1. –°–æ–∑–¥–∞–π—Ç–µ ZIP –∞—Ä—Ö–∏–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
    2. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É "–í—ã–±–µ—Ä–∏—Ç–µ ZIP –∞—Ä—Ö–∏–≤"
    """)
    st.stop()

# –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏
if 'current_idx' not in st.session_state:
    st.session_state.current_idx = 0
if 'annotations' not in st.session_state:
    st.session_state.annotations = {}
if 'form_counter' not in st.session_state:
    st.session_state.form_counter = 0


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞ —Ñ–æ—Ä–º—ã
def reset_form():
    st.session_state.form_counter += 1


# –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
if 'last_image' not in st.session_state or st.session_state.last_image != images[st.session_state.current_idx]:
    st.session_state.last_image = images[st.session_state.current_idx]
    reset_form()

# –ù–∞–≤–∏–≥–∞—Ü–∏—è
col1, col2, col3 = st.columns([1, 4, 1])
with col1:
    if st.button("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", disabled=st.session_state.current_idx == 0):
        st.session_state.current_idx -= 1
        st.rerun()
with col3:
    if st.button("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", disabled=st.session_state.current_idx >= len(images) - 1):
        st.session_state.current_idx += 1
        st.rerun()

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Ñ–æ—Ä–º—ã —Ä–∞–∑–º–µ—Ç–∫–∏
current_image = images[st.session_state.current_idx]
img_path = image_paths[current_image]

left_col, right_col = st.columns([2, 1])

with left_col:
    try:
        img = Image.open(img_path)
        st.image(img, caption=current_image, use_container_width=True)
        st.write(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {st.session_state.current_idx + 1} –∏–∑ {len(images)}")
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

with right_col:
    st.subheader("–†–∞–∑–º–µ—Ç–∫–∞")

    if current_image not in st.session_state.annotations:
        st.session_state.annotations[current_image] = []

    # –ü–û–õ–Ø –§–û–†–ú–´
    counter = st.session_state.form_counter

    # –ü–æ–ª –∏ –í–æ–∑—Ä–∞—Å—Ç –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
    col1, col2 = st.columns(2)

    with col1:
        st.markdown('<p class="category-title-person">–ü–æ–ª:</p>', unsafe_allow_html=True)
        sex = st.radio("", ["–ú", "–ñ"],
                       key=f"form_sex_{counter}", label_visibility="collapsed",
                       index=1, horizontal=True)

    with col2:
        st.markdown('<p class="category-title-person">–í–æ–∑—Ä–∞—Å—Ç:</p>', unsafe_allow_html=True)
        age = st.radio("", ["–†–µ–±–µ–Ω–æ–∫", "–í–∑—Ä–æ—Å–ª—ã–π", "–ü–æ–∂–∏–ª–æ–π"],
                       key=f"form_age_{counter}", label_visibility="collapsed",
                       index=1, horizontal=True)

    # –í–µ—Ä—Ö –∏ –ù–∏–∑ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
    col3, col4 = st.columns(2)

    with col3:
        st.markdown('<p class="category-title-clothing">–í–µ—Ä—Ö:</p>', unsafe_allow_html=True)
        top_selected = []
        for option in sorted(top_options):
            if st.checkbox(option, key=f"top_{option}_{counter}"):
                top_selected.append(option)

    with col4:
        st.markdown('<p class="category-title-clothing">–ù–∏–∑:</p>', unsafe_allow_html=True)
        bottom_selected = []
        for option in sorted(bottom_options):
            if st.checkbox(option, key=f"bottom_{option}_{counter}"):
                bottom_selected.append(option)

    # –û–±—É–≤—å –∏ –ì–æ–ª–æ–≤–Ω–æ–π —É–±–æ—Ä –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
    col5, col6 = st.columns(2)

    with col5:
        st.markdown('<p class="category-title-accessories">–û–±—É–≤—å:</p>', unsafe_allow_html=True)
        shoes_selected = []
        for option in sorted(shoes_options):
            if st.checkbox(option, key=f"shoes_{option}_{counter}"):
                shoes_selected.append(option)

    with col6:
        st.markdown('<p class="category-title-accessories">–ì–æ–ª–æ–≤–Ω–æ–π —É–±–æ—Ä:</p>', unsafe_allow_html=True)
        head_selected = []
        for option in sorted(head_options):
            if st.checkbox(option, key=f"head_{option}_{counter}"):
                head_selected.append(option)

    # –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã
    st.markdown('<p class="category-title-accessories">–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã:</p>', unsafe_allow_html=True)
    accessoires_selected = []
    for option in sorted(accessoires_options):
        if st.checkbox(option, key=f"accessoires_{option}_{counter}"):
            accessoires_selected.append(option)

    # –ö–ù–û–ü–ö–ê –î–û–ë–ê–í–ò–¢–¨ –ß–ï–õ–û–í–ï–ö–ê
    if st.button("‚ûï –î–æ–±–∞–≤–∏—Ç—å —á–µ–ª–æ–≤–µ–∫–∞", use_container_width=True):
        st.session_state.annotations[current_image].append({
            "photo_id": current_image,
            "sex": sex,
            "age": age,
            "top": top_selected,
            "bottom": bottom_selected,
            "shoes": shoes_selected,
            "head": head_selected,
            "accessoires": accessoires_selected
        })

        reset_form()
        st.success("–î–æ–±–∞–≤–ª–µ–Ω–æ")
        st.rerun()

# –¢–∞–±–ª–∏—Ü–∞ —Ç–µ–∫—É—â–∏—Ö –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π
if st.session_state.annotations[current_image]:
    st.subheader("–†–∞–∑–º–µ—á–µ–Ω–Ω—ã–µ –ª—é–¥–∏")
    df = pd.DataFrame(st.session_state.annotations[current_image])
    st.dataframe(df)

# –≠–∫—Å–ø–æ—Ä—Ç
st.sidebar.markdown("---")
st.sidebar.header("üíæ –≠–∫—Å–ø–æ—Ä—Ç")

if st.session_state.annotations:
    all_data = []
    for img, people in st.session_state.annotations.items():
        for person in people:
            all_data.append({
                "photo_id": img,
                "sex": person["sex"],
                "age": person["age"],
                "top": ", ".join(person["top"]),
                "bottom": ", ".join(person["bottom"]),
                "shoes": ", ".join(person["shoes"]),
                "head": ", ".join(person["head"]),
                "accessoires": ", ".join(person["accessoires"])
            })

    if all_data:
        df_export = pd.DataFrame(all_data)
        csv = df_export.to_csv(index=False, encoding='utf-8')

        # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        name_part = annotator_name.strip() if annotator_name.strip() else "user"
        name_part = "".join(c for c in name_part if c.isalnum() or c in (' ', '-', '_')).strip()
        name_part = name_part.replace(' ', '_')

        folder_part = dataset_name if dataset_name else "dataset"
        annotated_images_count = len([img for img, people in st.session_state.annotations.items() if people])

        filename = f"{name_part}_{folder_part}_{annotated_images_count}.csv"

        st.sidebar.download_button(
            label="üì• –°–∫–∞—á–∞—Ç—å CSV",
            data=csv,
            file_name=filename,
            mime="text/csv",
            use_container_width=True
        )

        st.sidebar.success(f"–ì–æ—Ç–æ–≤–æ: {len(all_data)} –∑–∞–ø–∏—Å–µ–π")
        st.sidebar.info(f"üìÑ `{filename}`")
    else:
        st.sidebar.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
else:
    st.sidebar.info("–ù–µ—Ç —Ä–∞–∑–º–µ—á–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")